import { createEnv } from "@t3-oss/env-nextjs"
import { z } from "zod"

export const env = createEnv({
  server: {
    OPEN_AI_API_KEY: z.string().min(1).optional(),
    APOLLO_KEY: z.string(),
    APOLLO_GRAPH_REF: z.string(),
    KV_URL: z.string(),
    KV_REST_API_URL: z.string(),
    KV_REST_API_TOKEN: z.string(),
    KV_REST_API_READ_ONLY_TOKEN: z.string(),
    PINECONE_API_KEY: z.string(),
    PINECONE_ENVIRONMENT: z.string(),
    PINECONE_INDEX: z.string(),
    LASTFM_API_KEY: z.string(),
    LASTFM_API_SECRET: z.string(),
    LASTFM_USERNAME: z.string(),
    POSTGRES_URL: z.string(),
    POSTGRES_URL_NON_POOLING: z.string(),
    POSTGRES_PRISMA_URL: z.string(),
    POSTGRES_USER: z.string(),
    POSTGRES_PASSWORD: z.string(),
    POSTGRES_HOST: z.string(),
    POSTGRES_DATABASE: z.string(),
    EDGE_CONFIG: z.string().optional(),
  },
  client: {},
  runtimeEnv: {
    OPEN_AI_API_KEY: process.env.OPEN_AI_API_KEY,
    APOLLO_KEY: process.env.APOLLO_KEY,
    APOLLO_GRAPH_REF: process.env.APOLLO_GRAPH_REF,
    KV_URL: process.env.KV_URL,
    KV_REST_API_URL: process.env.KV_REST_API_URL,
    KV_REST_API_TOKEN: process.env.KV_REST_API_TOKEN,
    KV_REST_API_READ_ONLY_TOKEN: process.env.KV_REST_API_READ_ONLY_TOKEN,
    PINECONE_API_KEY: process.env.PINECONE_API_KEY,
    PINECONE_ENVIRONMENT: process.env.PINECONE_ENVIRONMENT,
    PINECONE_INDEX: process.env.PINECONE_INDEX,
    LASTFM_API_KEY: process.env.LASTFM_API_KEY,
    LASTFM_API_SECRET: process.env.LASTFM_API_SECRET,
    LASTFM_USERNAME: process.env.LASTFM_USERNAME,
    POSTGRES_URL: process.env.POSTGRES_URL,
    POSTGRES_URL_NON_POOLING: process.env.POSTGRES_URL_NON_POOLING,
    POSTGRES_PRISMA_URL: process.env.POSTGRES_PRISMA_URL,
    POSTGRES_USER: process.env.POSTGRES_USER,
    POSTGRES_PASSWORD: process.env.POSTGRES_PASSWORD,
    POSTGRES_HOST: process.env.POSTGRES_HOST,
    POSTGRES_DATABASE: process.env.POSTGRES_DATABASE,
    EDGE_CONFIG: process.env.EDGE_CONFIG,
  },
})
